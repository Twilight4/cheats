Usage:
  sgpt <OPTIONS> <PROMPT>

Setup your OpenAI API key in configuration file:
  nvim ~/.config/shell_gpt/.sgptrc

Install shell integration:
  sgpt --install-integration
               after this restart your terminal to apply changes

Shell example:
  sgpt --shell 'scan the target 10.10.2.17'

Code example:
  sgpt --code "solve classic fizz buzz problem using Python" > fizz_buzz.py
  cat fizz_buzz.py | sgpt --code "Generate comments for each line of my code"

Chat persistence example:
  sgpt --chat conversation_1 "please remember my favorite number: 4"

Shell integration example:
  create index.html file (C-l by default)

REPL Example:
  sgpt --shell --repl temp --no-cache

Options:
  --shell, -s               generate a shell command with the prompt
  --code, -c                specifically request pure code output
  --no-interaction          interactive mode for --shell option [default: interaction]
  --repl <SESSION_NAME>     interactively chat with GPT models. Use "temp" as a session name to start a temporary REPL session
  --no-cache                Control cache using --cache (default) and --no-cache options. This caching applies for all sgpt requests to OpenAI API.
  --chat <SESSION_NAME>     keep chat persistence
  --list-chats, -lc         list all the sessions from either conversational mode
  --show-chat <SESSION_NAME>  show all the messages related to a specific conversation
  --role <ROLE_NAME>        use role for GPT model [default: none]
  --list-roles, -lr         list roles
  --show-role <ROLE_NAME>   show role [default: None]

Stdin prompts:
  git diff | sgpt "Generate git commit message, for my changes"
  docker logs -n 20 my_app | sgpt "check logs, find errors, provide possible solutions"

Redirect operators to pass input:
  sgpt "summarise" < document.txt
  # -> The document discusses the impact...
  sgpt << EOF
  What is the best way to lear Golang?
  Provide simple hello world example.
  EOF
  # -> The best way to learn Golang...
  sgpt <<< "What is the best way to learn shell redirects?"
  # -> The best way to learn shell redirects is through...
  sgpt -s "POST localhost with" < data.json
  # -> curl -X POST -H "Content-Type: application/json" -d '{"a": 1, "b": 2}' http://localhost

Passing file names to ffmpeg:
  ls
  # -> 1.mp4 2.mp4 3.mp4
  sgpt -s "ffmpeg combine $(ls -m) into one video file without audio."
  # -> ffmpeg -i 1.mp4 -i 2.mp4 -i 3.mp4 -filter_complex "[0:v] [1:v] [2:v] concat=n=3:v=1 [v]" -map "[v]" out.mp4

If you would like to pass generated shell command using pipe, you can use --no-interaction (it's not integration) option.
This will disable interactive mode and will print generated command to stdout.
In this example we are using wl-copy to copy generated command to clipboard:
  sgpt -s "find all json files in current folder" --no-interaction | wl-copy

Shell integration:
  Shell integration allows you to use sgpt shell completions directly in your terminal, without the need to type sgpt with prompt and arguments. Shell integration enables the use of ShellGPT with hotkeys in your terminal. This feature puts sgpt completions directly into terminal buffer (input line), allowing for immediate editing of suggested commands.

REPL Mode:
  There is very handy REPL (read–eval–print loop) mode, which allows you to interactively chat with GPT models. To start a chat session in REPL mode, use the --repl option followed by a unique session name. You can also use "temp" as a session name to start a temporary REPL session. Note that --chat and --repl are using same underlying object, so you can use --chat to start a chat session and then pick it up with --repl to continue the conversation in REPL mode. REPL mode can work with --shell and --code options, which makes it very handy for interactive shell commands and code generation. To provide multiline prompt use triple quotes """:
  sgpt --repl temp
  Entering REPL mode, press Ctrl+C to exit.
  >>> """
  ... Explain following code:
  ... import random
  ... print(random.randint(1, 10))
  ... """
  It is a Python script that uses the random module to generate and print a random integer.