iodine: Creates DNS tunneling communications
Source: https://github.com/yarrick/iodine

Options:
  -f       Run the server in the foreground
  -c       Skip checking the client IP address and port for each DNS request
  -P       Set a password for authentication
  10.1.1.1/24
           Argument is to set the network IP for the new network interface (`dns0`).
           The IP address of the server will be `10.1.1.1` and the client `10.1.1.2`.
           `att.tunnel.com` is the nameserver we previously set.

Informational:
  We need to use the DNS Data Exfiltration when the firewall blocks and filters all traffic. We can 
  pass data or TCP/UDP packets through a firewall using the DNS protocol, but it is important
  to ensure that the DNS is allowed and resolving domain names to IP addresses.

Data Exfiltration over DNS requirements and steps:
  1. An attacker registers a domain name, for example, tunnel.com (you need to control a domain name and set up DNS records, including NS, A, or TXT)
  2. The attacker sets up tunnel.com's NS record points to a server that the attacker controls.
  3. The malware or the attacker sends sensitive data from a victim machine to a domain name they
     controlâ€”for example, passw0rd.tunnel.com, where passw0rd is the data that needs to be transferred.
  4. The DNS request is sent through the local DNS server and is forwarded through the Internet.
  5. The attacker's authoritative DNS (malicious server) receives the DNS request.
  6. Finally, the attacker extracts the password from the domain name.
