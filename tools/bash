Scripting one-liners
------------------------------------------------------------------------------------------------------------------------------------------------------
for f in *.jpg; do file $f; done                              For all .jpg files run file
if [ $(file p.txt | awk '{ print $2 }') = "ASCII" ]; then cp p.txt th.txt; else echo 'no ASCII in output'; fi
                                                              If p.txt outputs ASCII, copy it to th.txt, if it doesn't outuput ASCII, say echo message
for g in *.txt; do if [ $(file $g | awk '{ print $2 }') = "ASCII" ]; then mv $g ../; else echo "Files not moved"; fi; done
                                                              In all .txt files, if each file outputs ASCII, mv the file to ../
while true; do ping -c 1 google.com > /dev/null && echo "Online" || echo "Offline"; sleep 10; done
                                                              Check if you're online every 10 seconds and output a message
myfunction() { echo "Hello, $1"; }                            Function to say Hello with argument
myfunction "World"


Useful tools
------------------------------------------------------------------------------------------------------------------------------------------------------
awk '{ print $1 }'                                            Print first column
awk '{print $NF}'                                             Print the last column
awk '{print $2,$5}'                                           Print the second and fifth columns
awk '{printf "%-25s %s\n", $1, $2}'                           Print with the second column starting at 25 spaces
awk -F "https://" '{print $2}'                                Use a string as a delimiter, then print the second column

cut -f 2-                                                     Print from the second column to the end of the line
cut -d ' ' -f2                                                Cut with a delimiter of a space, then print the second field
cut -d ' ' -f2-5                                              Cut with a delimiter of a space, then print the second through the fifth fields
cut -d ' ' -f2-                                               Cut with a delimiter of a space, then print the second field to the end

rg -i                                                         Search for a pattern in a case-insensitive way
rg -v -i                                                      Search for lines that do not match the pattern, in a case-insensitive way
rg -l -i                                                      List only the filenames that contain the matching pattern
rg -i -l | xargs $EDITOR                                      Find files containing the pattern, and open them with the default editor
rg --hidden -i                                                Search in hidden files as well
rg -o -i                                                      Only output the matching parts of lines
rg -c -i                                                      Count the number of matches per file
rg -i --sort                                                  Search in a case-insensitive way and sort the results
rg 'FOO|BAR'                                                  Find FOO and lines that contain BAR
grep -E 'FOO|BAR'                                             Find lines that contain FOO or BAR
grep '[0-9]'                                                  Find lines that contain a number
grep '[0-9]$'                                                 Find lines that end with a number
grep 'FOO$'                                                   Find lines that end with FOO
grep '^[0-9]'                                                 Find lines that start with a number
grep '^FOO'                                                   Find lines that start with FOO


Sed
------------------------------------------------------------------------------------------------------------------------------------------------------
sed 's/^/FOO/g'                                               Add FOO to the beginning of each line
sed 's/$/FOO/g'                                               Add FOO to the end of each line
sed /^$/d                                                     Compress blank lines
sed '/[[:blank:]]/d'                                          Find lines that contain a single word
sed '/FOO/I,+12 d'                                            Find FOO and delete that and the next 12 lines
sed 's/FOO.*$//g'                                             Find FOO and delete to the end of file
sed 's/FOO/\n&/g'                                             Find FOO and insert a new line and FOO
sed 's/.* //'                                                 Find lines that contain a space and print from the space to the end of the line
sed 's/FOO$//'                                                Find lines that end with FOO, and delete FOO
sed '/^FOO/{n;d;}'                                            Find lines that start with FOO and delete the following line
sed '/^FOO/i\ '                                               Find lines that start with FOO and insert a line before
sed '/^FOO/a\ '                                               Find lines that start with FOO and insert a line after
sed -n '/FOO/,$p'                                             Print from FOO to the end of the file
sed s/FOO.*//                                                 Print from FOO to the end of the line
sed -n '5,/^$/p'                                              Print from the 5th line to the first blank line
sed 's/[A-Z]\{2\},//g'                                        Remove any 2 capital letters followed by a comma
sed '/^$/d'                                                   Remove blank lines
sed '/./,$!d'                                                 Remove blank lines from the beginning of a file
sed -e :a -e '/^\n*$/{$d;N;ba' -e '}'                         Remove blank lines from the end of a file
sed 's/[0-9]\{2\}\/[0-9]\{2\}\/[0-9]\{2\}//g'                 Remove dates (mm/dd/yy)
sed 's/[a-zA-Z0-9\-]*@acme.org//g'                            Remove emails from a specific domain
sed 's/^....//'                                               Remove first 4 characters from each line
sed '1,5d'                                                    Remove first 5 lines
sed 's/^[ \t]*//; s/[ \t]*$//'                                Remove leading and trailing whitespace from each line
sed 's/^[ \t]*//'                                             Remove leading whitespace from each line
sed '/FOO/,/BAR/d'                                            Remove lines between FOO and BAR
sed '/[[:blank:]]/!d'                                         Remove lines that contain a single word
sed '/@.*@/d'                                                 Remove lines that contain two @ symbols
sed '/[0-9]/d'                                                Remove lines that contain a number
sed '/[0-9]$/d'                                               Remove lines that end with a number
sed '/FOO$/d'                                                 Remove lines that end with FOO
sed '/^[0-9]/d'                                               Remove lines that start with a number
sed '/^FOO/d'                                                 Remove lines that start with FOO
sed 's/[ \t]*$//'                                             Remove trailing whitespace from each line
sed -r 's/([^ ]*acme\.org[^ ]*)/ /g'                          Remove URLs from a specific domain
sed 's/ \{2,\}/,/g'                                           Replace 2 or more spaces with a comma
sed 's/\.\.\.//g'                                             Replace 3 periods with nothing
sed 's/\t/:/g'                                                Replace a tab with a colon. Convert IP and ports columns from Excel into IP:port
sed 's/FOO/BAR/g'                                             Replace FOO with BAR
sed '/TEST/!s/FOO/BAR/g'                                      Replace FOO with BAR, except on lines that contain TEST
sed '/TEST/s/FOO/BAR/g'                                       Replace FOO with BAR, on lines that contain TEST
sed 's/FOO//g'                                                Replace FOO with nothing
sed -n 'H; ${x; s/\n/|/g; p}'                                 Replace 'new line' with a pipe '|'
sed 's/\./ /g'                                                Replace a period with a space
sed 's/[^ ]\+/\L\u&/g'                                        Title case
sed "s/$FOO./$FOO/g"                                          Variables - use double quotes with sed or grep
sed 's/\([^,]*,\)\{7\}[^,]*,/&\n/g'                           Replace the 8th comma with a new line
sed '/^.,/d'                                                  Remove lines where the second letter is a comma
sed -e :a -e '$!N;s/\nFOO/ /;ta' -e 'P;D'                     Find lines that start with FOO, insert a space and append to the previous line
sed -n '/FOO/,/BAR/p'                                         Print lines between FOO and BAR
sed -e '/./{H;$!d;}' -e 'x;/FOO/!d;'                          Print paragraphs that contains FOO


Awk
------------------------------------------------------------------------------------------------------------------------------------------------------
awk -v n=-2 'NR==n+1 && !NF{next} /FOO/ {n=NR}1'              Find FOO, if the next line is blank, delete it

awk -v n=-2 'NR==n+1 && !NF{next} /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/ {n=NR}1'
                                                              Find lines that start with IP, if the next line is blank, delete it
awk -v n=-2 'NR==n+1 && NF{print hold} /FOO/ {n=NR;hold=$0;next}1'
                                                              Find FOO, if the next line is blank, delete line containing FOO
awk '/FOO/ { FOO = 1; next }  FOO == 1 && /^$/ { FOO = 0; next }  { FOO = 0 }  { print }'
                                                              Find FOO, if the next line is blank, delete both lines
awk -v n=-2 'NR==n+1 {if($0 ~ /BAR/) { next; } else { print hold } } /FOO/ {n=NR;hold=$0;next}1'
                                                              Find FOO, if the next line contains BAR, delete both lines

awk 'NR == 1 || NR % 3 == 0'                                  Print the first and every third line
awk 'NR % 3 == 0'                                             Print every third line
awk '{print $2 " " $1}'                                       Print the second column, insert a space, then the first column
awk '/FOO/{f=1} (!f || f>2){print} (f && /BAR/){f++}'         Remove lines from FOO and the second BAR
awk '$2 !~ /[a-z]/'                                           Remove lines that contain [a-z] in the second column
awk 'NF != 2'                                                 Remove lines that contain two words
awk '!(/FOO/ && /BAR/)'                                       Remove lines that contain FOO and BAR


Command Line
------------------------------------------------------------------------------------------------------------------------------------------------------
comm file1 file2                                              Shared by both files
comm -<123> file1 file2                                       Used to suppress columns
comm -12 file1 file2                                          Suppress columns 1 and 2

column -t                                                     Align columns
column -t -s ','                                              Align columns using a comma

xml_grep ‘firstName' file.xml --text_only                     Extract data from XML element

perl -pe 's/\d{2}\/\d{2}\/\d{2}//g'                           Find dates mm/dd/yy

printf '%s\n' 'g/^FOO/-1d' w | ed -s                          Find lines that start with FOO and delete the previous line

fmt -w 25                                                     Limit the number of characters on a line to 25

rev                                                           Reverse the string
paste -s -d" "                                                Convert a list into a single line
cat -s                                                        Remove double spacing
printf '%s\n' 'g/FOO/d\' '-d' w | ed -s                       Remove lines that contain FOO and the previous line
grep -Ev '^\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'                   Remove lines that start with an IP

cat tmp | tr -d "\n" | tr -d " "                              Remove new lines and spaces. Example: copying a hash from Rubeus for use in Mimikatz
cat tmp | rev | sed 's/^[ \t]*//' | cut -d ' ' -f2- | rev     Remove the last column
head -n -5                                                    Remove the last 5 lines

find . -type f -exec sed -i 's/FOO/BAR/g' {} +                Replace FOO with BAR recursively in the current directory
find . -type f -empty -delete                                 Remove all empty files in a folder

sort -k2                                                      Sort by the second column
sort -n -u -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4                   Sort IPs

tr -d '\t'                                                    Delete a tab
tr ',' '\n'                                                   Translate a comma to a new line
tr -s ' '                                                     Translate any number of spaces to a single space
tr '[a-z]' '[A-Z]'                                            Translate lower case to upper case
tr '[A-Z]' '[a-z]'                                            Translate upper case to lower case
tr ';' '\n'                                                   Replace a semicolon with a new line


------------------------------------------------------------------------------------------------------------------------------------------------------
# Check for root when running a script
if [ $EUID -ne 0 ]; then
     echo
     echo "[!] This script must be ran as root."
     exit 1
fi

# Check for an argument when running a script. If not provided, print the usage
if [ -z "$1" ]; then
     echo
     echo "Usage: $0 <domain name>"
     exit 1
fi

# Check for two arguments when running a script. If both are not provided, print the usage
if [ $# -ne 2 ]; then
     echo
     echo "Usage: $0 <input file> <output file>"
     exit 1
fi

# Check for a certain argument when running a script. Give feedback to user
echo -e "Usage: test.sh <target IP> <scan type>"
if [ "$2" == "All" ]; then
     echo "Running all scans on $1."
else
     echo "Running a $2 scan on $1."
fi


# Check for no answer
if [ -z $location ]; then
     f_error
     exit 1
fi

# Check for wrong answer
if [ ! -f $location ]; then
     f_error
     exit 1
fi

# Check for no answer, double brackets are needed to handle a space in a variable (ex. Home Depot)
if [[ -z $company ]]; then
     f_error
     exit 1
fi

# Check for two variables
echo -n "Enter color: "
read color
echo -n "Enter another color: "
read color2

if [ $color = "red" ] && [ $color2 = "grey" ]; then
     echo
     echo "The Wall won't fall."
     echo
     exit
else
     echo
     echo "Those colors are crap."
     echo
fi

# Validate input is a number and greater than 0
if ! [[ $number =~ ^[0-9]+$ ]] || [[ $number -le 0 ]]; then
     f_error
     exit 1
fi

# Validate a CIDR
sub=$(echo $cidr | cut -d '/' -f2)
if ! [[ $sub =~ ^[0-9]+$ ]] || [[ $sub -lt 8 || $sub -gt 32 ]]; then
     f_error
     exit 1
fi

# Validate a CVE
if echo "$1" | grep -Eq '^CVE-[0-9]{4}-[0-9]{4,7}$'; then
    echo 'Do more stuff here.'
else
    echo '[!] Invalid CVE.'
    exit 1
fi

# Validate a port number
if ! [[ $port =~ ^[0-9]+$ ]] [[ $port -lt 1 || $port -gt 65535 ]]; then
     echo "[!] Invalid port."
     exit 1
fi